<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>catflip</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jump=2
gravity_direction=270
dir = 1
cool = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
if keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right)
{
 sprite_index = cat// what the sprite looks like moving left
 x-=5; // speed if obj. when moving left
 dir = -1;
}
else
if keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_left)
{
 sprite_index = catflip // what the sprite looks like moving right
 x+=5; // speed of obj. when it moves right
 dir = 1;
}
else
if keyboard_check_released(vk_left)
{
 sprite_index = cat // sprite that shows when left is released
}
else
if keyboard_check_released(vk_right)
{
sprite_index = catflip // sprite that is show when user releases right
}


//double
if keyboard_check_pressed(vk_up) &amp;&amp; !keyboard_check_pressed(vk_down)
{
if jump&gt;0
{
vspeed=-10
jump-=1
}
}
if place_free(x,y+.5)
{
gravity=0.5
}
else
{
gravity=0
}


//shooting cooldown
if keyboard_check(ord('X')) &amp;&amp; dir == 1 &amp;&amp; cool == 0{
instance_create(x, y, bullet);
cool = 60;
} 
else if keyboard_check(ord('X')) &amp;&amp; dir ==-1 &amp;&amp; cool == 0{
instance_create(x, y, bulletl);
cool = 60;
}
if cool &gt; 0{
cool--;
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var dist,dir,xdir,ydir;
dist=point_distance(x,y,xprevious,yprevious);
dir=degtorad(point_direction(xprevious,yprevious,x,y));
xdir=cos(dir);
ydir=-sin(dir);
x=xprevious;
y=yprevious;
repeat dist{
if place_meeting(x+xdir,y,other.object_index)
hspeed=0; else
x+=xdir;
if place_meeting(x,y+ydir,other.object_index)
vspeed=0; else
y+=ydir;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jump=2
gravity_direction=270;



var dist,dir,xdir,ydir;
dist=point_distance(x,y,xprevious,yprevious);
dir=degtorad(point_direction(xprevious,yprevious,x,y));
xdir=cos(dir);
ydir=-sin(dir);
x=xprevious;
y=yprevious;
repeat dist{
if place_meeting(x+xdir,y,other.object_index)
hspeed=0; else
x+=xdir;
if place_meeting(x,y+ydir,other.object_index)
vspeed=0; else
y+=ydir;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
